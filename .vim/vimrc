" windows gvim {{{
if has("win32")
    let g:python3_host_prog = 'C:\Users\Administrator\AppData\Local\Programs\Python\Python38\python.exe'
endif
" }}}

" vim-plug {{{
call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'Raimondi/delimitMate'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'terryma/vim-multiple-cursors'
Plug 'kana/vim-textobj-user'
Plug 'sgur/vim-textobj-parameter'
Plug 'kana/vim-textobj-entire'
Plug 'mhinz/vim-signify'
Plug 'voldikss/vim-translator'
Plug 'Chiel92/vim-autoformat'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'chr4/nginx.vim'
Plug 'lu5je0/vim-java-bytecode'
Plug 'lu5je0/jsonc.vim'
Plug 'ervandew/supertab'
Plug 'vim-scripts/ReplaceWithRegister'
Plug 'junegunn/vim-peekaboo'
Plug 'pakutoma/toggle-terminal'

" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" 自动弹出pop
" Plug 'vim-scripts/AutoComplPop'

" snipmate
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

" themes
Plug 'w0ng/vim-hybrid'
Plug 'joshdick/onedark.vim'
Plug 'rakr/vim-one'
Plug 'dracula/vim'
Plug 'morhetz/gruvbox'

call plug#end()
" }}}

" 常规设置 {{{
set hlsearch " 高亮搜索结果
set ignorecase " 搜索时忽略大小写
set incsearch " 每输入一个字符就跳转到对应的结果
set noerrorbells " 关闭错误响声
set clipboard+=unnamed " 使用系统剪切板
set splitbelow " 默认在下侧分屏
set t_Co=256 " 开启256颜色支持
set nowrap " 默认不启用拆行
set autoindent
set number
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set encoding=utf8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,utf-16,big5,gb18030,ISO-8859,latin1
syntax on
set fdm=marker " 使用marker折叠
set foldlevelstart=99 " 打开文件默认不折叠

" make the backspace work like in most other programs
set backspace=indent,eol,start
" }}}

" airline {{{
" tab显示
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#show_close_button = 1

let g:airline_powerline_fonts=1

" 隐藏箭头
" let g:airline_left_sep = ''
" let g:airline_left_sep = ''
" let g:airline_right_sep = ''
" let g:airline_right_sep = ''
"
" }}}

" vim-signify {{{
set updatetime=1000 " 设置vim更新时间，主要用于更新gitgutter
" }}}

" vim-textobj-parameter {{{
let g:vim_textobj_parameter_mapping = 'a'
" }}}

" delimitMate {{{
let g:delimitMate_expand_cr=1
" }}}

" 按键映射 {{{
let mapleader=","

" vimrc
nnoremap <leader>vim :tabnew $MYVIMRC<cr>
nnoremap <leader>source :source $MYVIMRC<cr>

" tab switch
map <leader>tn :tabnew<cr>
nnoremap <silent> <leader>th :tabprev<cr>
nnoremap <silent> <leader>tl :tabnext<cr>
nnoremap <silent> <leader>e :NERDTreeToggle<CR>
nnoremap <silent> <leader>1 1gt
nnoremap <silent> <leader>2 2gt
nnoremap <silent> <leader>3 3gt
nnoremap <silent> <leader>4 4gt
nnoremap <silent> <leader>5 5gt
nnoremap <silent> <leader>6 6gt
nnoremap <silent> <leader>7 7gt
nnoremap <silent> <leader>8 8gt
nnoremap <silent> <leader>9 9gt

if has("win32")
    " 为了支持win+v
    imap <C-v> <ESC>"+gpa
    nmap <C-v> "+gpa
endif

" ctrl-c 复制
vnoremap <C-c> y

imap <M-j> <down>
imap <M-k> <up>
imap <M-h> <left>
imap <M-l> <right>

" 另存为
if has("gui_running")
    map <silent> <C-S> :brow saveas<CR>
    imap <silent> <C-S> <ESC>:brow saveas<CR>a
endif

map <silent> <F10> :set wrap!<CR>
imap <silent> <F10> <ESC>:set wrap!<CR>

" 快速切换窗口
" normal
nmap <silent> <M-J> <C-w>j
nmap <silent> <M-K> <C-w>k
nmap <silent> <M-H> <C-w>h
nmap <silent> <M-L> <C-w>l
" ins<silent>ert
imap <silent> <M-J> <ESC><C-w>j
imap <silent> <M-K> <ESC><C-w>k
imap <silent> <M-H> <ESC><C-w>h
imap <silent> <M-L> <ESC><C-w>l
" ter<silent>minal
tmap <silent> <M-J> <C-w>j
tmap <silent> <M-K> <C-w>k
tmap <silent> <M-H> <C-w>h
tmap <silent> <M-L> <C-w>l

" }}}

" 光标设置 {{{
" https://vim.fandom.com/wiki/Configuring_the_cursor
" 1 or 0 -> blinking block
" 2 solid block
" 3 -> blinking underscore
" 4 solid underscore
" Recent versions of xterm (282 or above) also support
" 5 -> blinking vertical bar
" 6 -> solid vertical bar

if has("win32")
    if &term =~ '^xterm'
        " normal mode
        let &t_EI .= "\<Esc>[8 q"
        " insert mode
        let &t_SI .= "\<Esc>[6 q"
    endif
endif
" }}}

" gVim {{{
if has("gui_running")
    " au GUIEnter * simalt ~x " 窗口启动时自动最大化
    set guioptions-=m " 隐藏菜单栏
    set guioptions-=T " 隐藏工具栏
    set guioptions-=L " 隐藏左侧滚动条
    set guioptions-=r " 隐藏右侧滚动条
    set guioptions-=b " 隐藏底部滚动条
    set lines=36
    set columns=110
    winpos 440 200
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    command Wsl :ter C:\Windows\Sysnative\wsl.exe
    " Windows下使用wsl作为默认终端
    " if has("win32")
    "   set shell=C:\Windows\Sysnative\wsl.exe
    "   set shellpipe=|
    "   set shellredir=>
    "   set shellcmdflag=
    " endif

    " Windows下使用ctrl v粘贴
endif
" }}}

" 主题配置 {{{
if has("mac")
    set guifont=Monaco\ for\ Powerline:h16
else
    set guifont=Consolas\ NF:h16
endif

colorscheme gruvbox
set bg=dark
" }}}

" vim-translator {{{
" Echo translation in the cmdline
nmap <silent> <Leader>w <Plug>Translate
vmap <silent> <Leader>w <Plug>TranslateV
" Display translation in a window
nmap <silent> <Leader>s <Plug>TranslateW
vmap <silent> <Leader>s <Plug>TranslateWV
nmap <silent> <m-s> <Plug>TranslateW
vmap <silent> <m-s> <Plug>TranslateWV
" Replace the text with translation
" nmap <silent> <Leader>r <Plug>TranslateR
" vmap <silent> <Leader>r <Plug>TranslateRV
" }}}

" supertab {{{
let g:SuperTabDefaultCompletionType = "<c-n>"
" }}}

" escalt.vim 让控制台下支持Alt {{{
" ---------------------------------------------------------------------
if !has("gui_running")
    " Load Once:
    if &cp || exists("g:loaded_escalt") || has("gui_running") || has("win32") || has("win64")
        finish
    endif
    let s:keepcpo = &cpo
    let g:loaded_escalt = 1
    set cpo&vim
    " ---------------------------------------------------------------------
    " Functions:
    function Escalt_console()
        " 0-9 =
        for i in range(48, 57) + range(61, 61) + range(65, 90)
            exe "set <M-".nr2char(i).">=\<Esc>".nr2char(i)
        endfor
        " 10, 22, 34, 62, 124 can't be set
        " set <M-,>=,
        " set <M-.>=.
        set ttimeoutlen=50
        " xterm keys, may also work in tmux with xterm-keys on
        set <F1>=OP
        set <F2>=OQ
        set <F3>=OR
        set <F4>=OS
        set <Home>=OH
        set <End>=OF
        set <S-Delete>=[3;2~
        if exists("$TMUX")
            set <S-F1>=[1;2P
            set <S-F2>=[1;2Q
            set <S-F3>=[1;2R
            set <S-F4>=[1;2S
            set <S-F5>=[15;2~
            set <S-F6>=[17;2~
            set <S-F7>=[18;2~
            set <S-F8>=[19;2~
            set <S-F9>=[20;2~
            set <S-F10>=[21;2~
            set <S-F11>=[23;2~
            set <S-F12>=[24;2~
            set <Home>=[1~
            set <End>=[4~
            " In xterm and tmux
            " 2 & 3 are Ins and Del, 5 & 6 are PgUp and PgDn
        elseif &term == 'linux'
            " Linux console keys, only S-F3 & S-F5 actually works
            " set <S-F1>=[25~
            " set <S-F2>=[26~
            set <S-F3>=[28~
            " set <S-F4>=[29~
            set <S-F5>=[31~
            " set <S-F6>=[32~
            " set <S-F7>=[33~
            " set <S-F8>=[34~
        else
            set <S-F1>=O1;2P
            set <S-F2>=O1;2Q
            set <S-F3>=O1;2R
            set <S-F4>=O1;2S
        endif
    endfunction
    " ---------------------------------------------------------------------
    " Call Functions:
    if !has('nvim') && !has("gui_running")
        call Escalt_console()
    endif
    " ---------------------------------------------------------------------
    " Restoration And Modelines:
    let &cpo= s:keepcpo
    unlet s:keepcpo
endif

" }}}

" terminal-toggle {{{

" map <C-@> to toggle
tnoremap <silent> <m-=> <C-w>:ToggleTerminal<CR>
nnoremap <silent> <m-=> :ToggleTerminal<CR>
inoremap <silent> <m-=> <ESC>:ToggleTerminal<CR>

" set your favorite shell
if has("win32")
    let g:toggle_terminal#command = 'wsl'
else
    let g:toggle_terminal#command = ''
endif

" set terminal window position
" (see possible options at :help vertical)
let g:toggle_terminal#position = 'bo'
" }}}
